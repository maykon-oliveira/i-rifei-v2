// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId        String         @unique
  email          String         @unique
  firstname      String?        @unique
  lastname       String?        @unique
  createdAt      DateTime       @default(now())
  subscription   Subscription?
  integrations   Integrations[]
  automations    Automation[]
  purchases      Purchase[]
  createdRiffles Raffle[]       @relation("Creator")
  RaffleNumber   RaffleNumber[]
  Notification   Notification[]
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      @db.Uuid
  token       String       @unique
  expiresAt   DateTime?
  instagramId String?      @unique
}

model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("Untitled")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  keywords  Keyword[]
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Raffle {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime
  totalNumbers Int
  numbers      RaffleNumber[]
  purchases    Purchase[]
  creatorId    String         @db.Uuid
  creator      User           @relation("Creator", fields: [creatorId], references: [id])
  winners      Winner[]
  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model RaffleNumber {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  raffleId   String             @db.Uuid
  raffle     Raffle             @relation(fields: [raffleId], references: [id])
  number     Int
  status     RaffleNumberStatus @default(AVAILABLE)
  purchaseId String?            @db.Uuid
  purchase   Purchase?          @relation(fields: [purchaseId], references: [id])
  buyerId    String?            @db.Uuid
  buyer      User?              @relation(fields: [buyerId], references: [id])
  Winner     Winner[]
}

enum RaffleNumberStatus {
  AVAILABLE
  RESERVED
  SOLD
}

model Purchase {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String         @db.Uuid
  user          User           @relation(fields: [userId], references: [id])
  raffleId      String         @db.Uuid
  raffle        Raffle         @relation(fields: [raffleId], references: [id])
  raffleNumbers RaffleNumber[]
  purchaseDate  DateTime       @default(now())
  payments      Payment[]
}

model Payment {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseId    String        @db.Uuid
  purchase      Purchase      @relation(fields: [purchaseId], references: [id])
  paymentMethod String
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentDate   DateTime?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Winner {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  raffleId       String       @db.Uuid
  raffle         Raffle       @relation(fields: [raffleId], references: [id])
  raffleNumberId String       @db.Uuid
  raffleNumber   RaffleNumber @relation(fields: [raffleNumberId], references: [id])
  winDate        DateTime     @default(now())
}

model Notification {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id])
  raffleId String?  @db.Uuid
  raffle   Raffle?  @relation(fields: [raffleId], references: [id])
  type     String
  message  String
  sentAt   DateTime @default(now())
}
